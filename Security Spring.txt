Para añadir el security de Spring

1. Añadimos la dependencia al pom
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
Ya si iniciamos el servidor nos saldrá una pagina de inicio del propio Spring

2. Despues en el modelo User implementamos UserDetails
implements UserDetails

3. Importamos todos los metodos necesarios

4. Cambiamos todos a true

5. En el public conection:
public Collection<? extends GrantedAuthority> getAuthorities() {
	List<SimpleGrantedAuthority> authorities = new ArrayList<>();
	if(this.administrator) {			
		authorities.add(new SimpleGrantedAuthority("ADMIN"));
	}else {
		authorities.add(new SimpleGrantedAuthority("USER"));
	}

	 return authorities;
}

6. En el servicio de UserService implementamos UserDetailsService
implements UserDetailsService

7. Añadimos todos los metodos que nos falta 

8. Modificamos el metodo que nos ha insertado.
//	metodo implementado del UserDetailsService
@Override
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
	User user = userRepository.findById(username).orElse(null);
	if(user == null) {
		throw new UsernameNotFoundException("Usuario no existe en la BD");
	}else {			
		return null;
	}
}


9. Creamos un package en com.jaranda llamadao security

10. Dentro creamos una clase llamada WebSecurityConfig

11. y pegamos todo esto:
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.jacaranda.service.UserService;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
	@Autowired
	private UserService myUserDetailService;

// Indicamos que la configuración se hará a travéx del servicio.
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(myUserDetailService);
	}

// Método que usaremos más abajo
	@Bean
	public UserDetailsService userDetailsService() {
		return new UserService();
	}

// Método que nos suministrará la codificación
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

// Método que autentifica
	@Bean
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		authProvider.setUserDetailsService(userDetailsService());
		authProvider.setPasswordEncoder(passwordEncoder());
		return authProvider;
	}
}

12. importamos todos imports: Ctrl + Alt + o
y ordenamos el codigo con boton derecho > Source > Format (Shitf + Ctrl + f)

13.



